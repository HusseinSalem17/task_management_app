// Mocks generated by Mockito 5.4.4 from annotations
// in task_manager_app/test/_utils/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:connectivity_plus/connectivity_plus.dart' as _i22;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i23;
import 'package:dio/dio.dart' as _i2;
import 'package:fpdart/fpdart.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:task_manager_app/core/exceptions/database/database_exception.dart'
    as _i17;
import 'package:task_manager_app/core/exceptions/network/network_exception.dart'
    as _i14;
import 'package:task_manager_app/core/network/dio_client.dart' as _i6;
import 'package:task_manager_app/data/datasources/local/_collections/export_collections.dart'
    as _i4;
import 'package:task_manager_app/data/datasources/local/auth/auth_local_data_source.dart'
    as _i9;
import 'package:task_manager_app/data/datasources/local/todo/todo_local_data_source.dart'
    as _i11;
import 'package:task_manager_app/data/datasources/remote/auth/auth_remote_data_source.dart'
    as _i8;
import 'package:task_manager_app/data/datasources/remote/todos/todo_remote_data_source.dart'
    as _i10;
import 'package:task_manager_app/data/models/auth/auth_model.dart' as _i3;
import 'package:task_manager_app/data/models/export_models.dart' as _i5;
import 'package:task_manager_app/domain/entities/auth/auth_entity.dart' as _i15;
import 'package:task_manager_app/domain/entities/export_entities.dart' as _i19;
import 'package:task_manager_app/domain/repositories/auth/auth_repository.dart'
    as _i12;
import 'package:task_manager_app/domain/repositories/todo/todo_repository.dart'
    as _i18;
import 'package:task_manager_app/domain/usecases/auth/auth_usecases.dart'
    as _i20;
import 'package:task_manager_app/domain/usecases/todo/todo_usecases.dart'
    as _i21;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthModel_1 extends _i1.SmartFake implements _i3.AuthModel {
  _FakeAuthModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthCollection_2 extends _i1.SmartFake
    implements _i4.AuthCollection {
  _FakeAuthCollection_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoModel_3 extends _i1.SmartFake implements _i5.TodoModel {
  _FakeTodoModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoDetailModel_4 extends _i1.SmartFake
    implements _i5.TodoDetailModel {
  _FakeTodoDetailModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoCollection_5 extends _i1.SmartFake
    implements _i4.TodoCollection {
  _FakeTodoCollection_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i6.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Response<dynamic>> get(
    String? url, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue:
            _i7.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response<dynamic>>);

  @override
  _i7.Future<_i2.Response<dynamic>> post(
    String? uri, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [uri],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue:
            _i7.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #post,
            [uri],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response<dynamic>>);

  @override
  _i7.Future<_i2.Response<dynamic>> put(
    String? uri, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [uri],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue:
            _i7.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #put,
            [uri],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response<dynamic>>);

  @override
  _i7.Future<_i2.Response<dynamic>> patch(
    String? uri, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [uri],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue:
            _i7.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #patch,
            [uri],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i7.Future<_i2.Response<dynamic>>);

  @override
  _i7.Future<dynamic> delete(
    String? uri, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [uri],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i8.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.AuthModel> getUserData() => (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
        ),
        returnValue: _i7.Future<_i3.AuthModel>.value(_FakeAuthModel_1(
          this,
          Invocation.method(
            #getUserData,
            [],
          ),
        )),
      ) as _i7.Future<_i3.AuthModel>);

  @override
  _i7.Future<_i3.AuthModel> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i3.AuthModel>.value(_FakeAuthModel_1(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i3.AuthModel>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i9.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> saveCurrentUser(_i4.AuthCollection? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentUser,
          [user],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i4.AuthCollection> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i7.Future<_i4.AuthCollection>.value(_FakeAuthCollection_2(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i7.Future<_i4.AuthCollection>);

  @override
  _i7.Future<void> deleteCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteCurrentUser,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [TodoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteDataSource extends _i1.Mock
    implements _i10.TodoRemoteDataSource {
  MockTodoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.TodoModel> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i7.Future<_i5.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i5.TodoModel>);

  @override
  _i7.Future<_i5.TodoModel> getRandomTodos() => (super.noSuchMethod(
        Invocation.method(
          #getRandomTodos,
          [],
        ),
        returnValue: _i7.Future<_i5.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #getRandomTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i5.TodoModel>);

  @override
  _i7.Future<_i5.TodoModel> getTodosByPagination({
    required int? limit,
    required int? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodosByPagination,
          [],
          {
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i7.Future<_i5.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #getTodosByPagination,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i7.Future<_i5.TodoModel>);

  @override
  _i7.Future<_i5.TodoModel> getUserTodos({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserTodos,
          [],
          {#userId: userId},
        ),
        returnValue: _i7.Future<_i5.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #getUserTodos,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i7.Future<_i5.TodoModel>);

  @override
  _i7.Future<_i5.TodoModel> getTodoDetail({required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoDetail,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7.Future<_i5.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #getTodoDetail,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i5.TodoModel>);

  @override
  _i7.Future<_i5.TodoDetailModel> createTodo(
          {required _i5.TodoDetailModel? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [],
          {#todo: todo},
        ),
        returnValue:
            _i7.Future<_i5.TodoDetailModel>.value(_FakeTodoDetailModel_4(
          this,
          Invocation.method(
            #createTodo,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i7.Future<_i5.TodoDetailModel>);

  @override
  _i7.Future<_i5.TodoDetailModel> updateTodo({
    required int? todoId,
    required _i5.TodoDetailModel? todo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [],
          {
            #todoId: todoId,
            #todo: todo,
          },
        ),
        returnValue:
            _i7.Future<_i5.TodoDetailModel>.value(_FakeTodoDetailModel_4(
          this,
          Invocation.method(
            #updateTodo,
            [],
            {
              #todoId: todoId,
              #todo: todo,
            },
          ),
        )),
      ) as _i7.Future<_i5.TodoDetailModel>);

  @override
  _i7.Future<_i5.TodoDetailModel> deleteTodo({required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [],
          {#todoId: todoId},
        ),
        returnValue:
            _i7.Future<_i5.TodoDetailModel>.value(_FakeTodoDetailModel_4(
          this,
          Invocation.method(
            #deleteTodo,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i5.TodoDetailModel>);
}

/// A class which mocks [TodoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoLocalDataSource extends _i1.Mock
    implements _i11.TodoLocalDataSource {
  MockTodoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.TodoCollection> getSavedTodos() => (super.noSuchMethod(
        Invocation.method(
          #getSavedTodos,
          [],
        ),
        returnValue: _i7.Future<_i4.TodoCollection>.value(_FakeTodoCollection_5(
          this,
          Invocation.method(
            #getSavedTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i4.TodoCollection>);

  @override
  _i7.Future<_i4.TodoCollection> getSavedTodoDetail({required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedTodoDetail,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7.Future<_i4.TodoCollection>.value(_FakeTodoCollection_5(
          this,
          Invocation.method(
            #getSavedTodoDetail,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i4.TodoCollection>);

  @override
  _i7.Future<void> saveTodos({required _i4.TodoCollection? todos}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodos,
          [],
          {#todos: todos},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteSavedTodos() => (super.noSuchMethod(
        Invocation.method(
          #deleteSavedTodos,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> areTodosSaved() => (super.noSuchMethod(
        Invocation.method(
          #areTodosSaved,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i12.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i15.AuthEntity>>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>
      getUserData() => (super.noSuchMethod(
            Invocation.method(
              #getUserData,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i14.NetworkException, _i15.AuthEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i14.NetworkException, _i15.AuthEntity>>(
              this,
              Invocation.method(
                #getUserData,
                [],
              ),
            )),
          ) as _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> saveCurrentUser(
          {required _i15.AuthEntity? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentUser,
          [],
          {#user: user},
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #saveCurrentUser,
            [],
            {#user: user},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, _i15.AuthEntity>>
      getCurrentUser() => (super.noSuchMethod(
            Invocation.method(
              #getCurrentUser,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i17.DatabaseException, _i15.AuthEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i17.DatabaseException, _i15.AuthEntity>>(
              this,
              Invocation.method(
                #getCurrentUser,
                [],
              ),
            )),
          ) as _i7
              .Future<_i13.Either<_i17.DatabaseException, _i15.AuthEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> deleteCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCurrentUser,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #deleteCurrentUser,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, bool>> isLoggedIn() =>
      (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, bool>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, bool>>(
          this,
          Invocation.method(
            #isLoggedIn,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, bool>>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i18.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>> getTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>
      getRandomTodos() => (super.noSuchMethod(
            Invocation.method(
              #getRandomTodos,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
              this,
              Invocation.method(
                #getRandomTodos,
                [],
              ),
            )),
          ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>
      getTodosByPagination({
    required int? limit,
    required int? skip,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getTodosByPagination,
              [],
              {
                #limit: limit,
                #skip: skip,
              },
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
              this,
              Invocation.method(
                #getTodosByPagination,
                [],
                {
                  #limit: limit,
                  #skip: skip,
                },
              ),
            )),
          ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>> getUserTodos(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserTodos,
          [],
          {#userId: userId},
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getUserTodos,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>> getTodoDetail(
          {required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoDetail,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getTodoDetail,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>> createTodo(
          {required _i19.TodoDetailEntity? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [],
          {#todo: todo},
        ),
        returnValue: _i7.Future<
                _i13
                .Either<_i14.NetworkException, _i19.TodoDetailEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>(
          this,
          Invocation.method(
            #createTodo,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i7
          .Future<_i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>> updateTodo({
    required int? todoId,
    required _i19.TodoDetailEntity? todo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [],
          {
            #todoId: todoId,
            #todo: todo,
          },
        ),
        returnValue: _i7.Future<
                _i13
                .Either<_i14.NetworkException, _i19.TodoDetailEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>(
          this,
          Invocation.method(
            #updateTodo,
            [],
            {
              #todoId: todoId,
              #todo: todo,
            },
          ),
        )),
      ) as _i7
          .Future<_i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>> deleteTodo(
          {required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7.Future<
                _i13
                .Either<_i14.NetworkException, _i19.TodoDetailEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>(
          this,
          Invocation.method(
            #deleteTodo,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7
          .Future<_i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>
      getSavedTodos() => (super.noSuchMethod(
            Invocation.method(
              #getSavedTodos,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i17.DatabaseException, _i19.TodoEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i17.DatabaseException, _i19.TodoEntity>>(
              this,
              Invocation.method(
                #getSavedTodos,
                [],
              ),
            )),
          ) as _i7
              .Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i17.DatabaseException, _i19.TodoEntity>> getSavedTodoDetail(
          {required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedTodoDetail,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7
            .Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i17.DatabaseException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getSavedTodoDetail,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> saveTodos(
          {required _i19.TodoEntity? todos}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodos,
          [],
          {#todos: todos},
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #saveTodos,
            [],
            {#todos: todos},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> deleteSavedTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSavedTodos,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #deleteSavedTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, bool>> areTodosSaved() =>
      (super.noSuchMethod(
        Invocation.method(
          #areTodosSaved,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, bool>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, bool>>(
          this,
          Invocation.method(
            #areTodosSaved,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, bool>>);
}

/// A class which mocks [AuthUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUsecases extends _i1.Mock implements _i20.AuthUsecases {
  MockAuthUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i15.AuthEntity>>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>
      getUserData() => (super.noSuchMethod(
            Invocation.method(
              #getUserData,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i14.NetworkException, _i15.AuthEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i14.NetworkException, _i15.AuthEntity>>(
              this,
              Invocation.method(
                #getUserData,
                [],
              ),
            )),
          ) as _i7.Future<_i13.Either<_i14.NetworkException, _i15.AuthEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> saveCurrentUser(
          {required _i15.AuthEntity? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentUser,
          [],
          {#user: user},
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #saveCurrentUser,
            [],
            {#user: user},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, _i15.AuthEntity>>
      getCurrentUser() => (super.noSuchMethod(
            Invocation.method(
              #getCurrentUser,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i17.DatabaseException, _i15.AuthEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i17.DatabaseException, _i15.AuthEntity>>(
              this,
              Invocation.method(
                #getCurrentUser,
                [],
              ),
            )),
          ) as _i7
              .Future<_i13.Either<_i17.DatabaseException, _i15.AuthEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> deleteCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCurrentUser,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #deleteCurrentUser,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, bool>> isLoggedIn() =>
      (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, bool>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, bool>>(
          this,
          Invocation.method(
            #isLoggedIn,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, bool>>);
}

/// A class which mocks [TodoUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoUsecases extends _i1.Mock implements _i21.TodoUsecases {
  MockTodoUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>> getTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>
      getRandomTodos() => (super.noSuchMethod(
            Invocation.method(
              #getRandomTodos,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
              this,
              Invocation.method(
                #getRandomTodos,
                [],
              ),
            )),
          ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>
      getTodosByPagination({
    required int? limit,
    required int? skip,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getTodosByPagination,
              [],
              {
                #limit: limit,
                #skip: skip,
              },
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
              this,
              Invocation.method(
                #getTodosByPagination,
                [],
                {
                  #limit: limit,
                  #skip: skip,
                },
              ),
            )),
          ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>> getUserTodos(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserTodos,
          [],
          {#userId: userId},
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getUserTodos,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>> getTodoDetail(
          {required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoDetail,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7
            .Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getTodoDetail,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i14.NetworkException, _i19.TodoEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>> createTodo(
          {required _i19.TodoDetailEntity? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [],
          {#todo: todo},
        ),
        returnValue: _i7.Future<
                _i13
                .Either<_i14.NetworkException, _i19.TodoDetailEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>(
          this,
          Invocation.method(
            #createTodo,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i7
          .Future<_i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>> updateTodo({
    required int? todoId,
    required _i19.TodoDetailEntity? todo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [],
          {
            #todoId: todoId,
            #todo: todo,
          },
        ),
        returnValue: _i7.Future<
                _i13
                .Either<_i14.NetworkException, _i19.TodoDetailEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>(
          this,
          Invocation.method(
            #updateTodo,
            [],
            {
              #todoId: todoId,
              #todo: todo,
            },
          ),
        )),
      ) as _i7
          .Future<_i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>> deleteTodo(
          {required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7.Future<
                _i13
                .Either<_i14.NetworkException, _i19.TodoDetailEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>(
          this,
          Invocation.method(
            #deleteTodo,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7
          .Future<_i13.Either<_i14.NetworkException, _i19.TodoDetailEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>
      getSavedTodos() => (super.noSuchMethod(
            Invocation.method(
              #getSavedTodos,
              [],
            ),
            returnValue: _i7.Future<
                    _i13.Either<_i17.DatabaseException, _i19.TodoEntity>>.value(
                _i16.dummyValue<
                    _i13.Either<_i17.DatabaseException, _i19.TodoEntity>>(
              this,
              Invocation.method(
                #getSavedTodos,
                [],
              ),
            )),
          ) as _i7
              .Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>);

  @override
  _i7.Future<
      _i13.Either<_i17.DatabaseException, _i19.TodoEntity>> getSavedTodoDetail(
          {required int? todoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedTodoDetail,
          [],
          {#todoId: todoId},
        ),
        returnValue: _i7
            .Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>.value(
            _i16.dummyValue<
                _i13.Either<_i17.DatabaseException, _i19.TodoEntity>>(
          this,
          Invocation.method(
            #getSavedTodoDetail,
            [],
            {#todoId: todoId},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, _i19.TodoEntity>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> saveTodos(
          {required _i19.TodoEntity? todos}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodos,
          [],
          {#todos: todos},
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #saveTodos,
            [],
            {#todos: todos},
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, void>> deleteSavedTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSavedTodos,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, void>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, void>>(
          this,
          Invocation.method(
            #deleteSavedTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, void>>);

  @override
  _i7.Future<_i13.Either<_i17.DatabaseException, bool>> areTodosSaved() =>
      (super.noSuchMethod(
        Invocation.method(
          #areTodosSaved,
          [],
        ),
        returnValue:
            _i7.Future<_i13.Either<_i17.DatabaseException, bool>>.value(
                _i16.dummyValue<_i13.Either<_i17.DatabaseException, bool>>(
          this,
          Invocation.method(
            #areTodosSaved,
            [],
          ),
        )),
      ) as _i7.Future<_i13.Either<_i17.DatabaseException, bool>>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i22.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<List<_i23.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i7.Stream<List<_i23.ConnectivityResult>>.empty(),
      ) as _i7.Stream<List<_i23.ConnectivityResult>>);

  @override
  _i7.Future<List<_i23.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i7.Future<List<_i23.ConnectivityResult>>.value(
            <_i23.ConnectivityResult>[]),
      ) as _i7.Future<List<_i23.ConnectivityResult>>);
}
